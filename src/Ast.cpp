#include <iostream>
#include <string>
#include "Ast.h"
#include "SymbolTable.h"
#include "Type.h"
#include "Unit.h"
#include "Instruction.h"
#include "IRBuilder.h"

extern FILE *yyout;
int Node::counter = 0;
IRBuilder* Node::builder = nullptr;
Type* returnType = nullptr;
bool funcReturned = false;
bool inIteration = false;//在迭代中

Node::Node()
{
    seq = counter++;
}

void Ast::output()
{
    fprintf(yyout, "program\n");
    if(root != nullptr)
        root->output(4);
}

//lab6 added
void Node::backPatch(std::vector<Instruction*> &list, BasicBlock*bb)
{
    for(auto &inst:list)
    {
        if(inst->isCond())
            dynamic_cast<CondBrInstruction*>(inst)->setTrueBranch(bb);
        else if(inst->isUncond())
            dynamic_cast<UncondBrInstruction*>(inst)->setBranch(bb);
    }
}

std::vector<Instruction*> Node::merge(std::vector<Instruction*> &list1, std::vector<Instruction*> &list2)
{
    std::vector<Instruction*> res(list1);
    res.insert(res.end(), list2.begin(), list2.end());
    return res;
}

void Ast::genCode(Unit *unit)
{
    IRBuilder *builder = new IRBuilder(unit);
    Node::setIRBuilder(builder);
    root->genCode();
}

void FunctionDef::genCode()
{
    Unit *unit = builder->getUnit();
    Function *func = new Function(unit, se);
    BasicBlock *entry = func->getEntry();
    // set the insert point to the entry basicblock of this function.
    builder->setInsertBB(entry);

    stmt->genCode();

    /**
     * Construct control flow graph. You need do set successors and predecessors for each basic block.
     * Todo
    */
   
}

void BinaryExpr::genCode()
{
    BasicBlock *bb = builder->getInsertBB();
    Function *func = bb->getParent();
    if (op == AND)
    {
        BasicBlock *trueBB = new BasicBlock(func);  // if the result of lhs is true, jump to the trueBB.
        expr1->genCode();
        backPatch(expr1->trueList(), trueBB);
        builder->setInsertBB(trueBB);               // set the insert point to the trueBB so that intructions generated by expr2 will be inserted into it.
        expr2->genCode();
        true_list = expr2->trueList();
        false_list = merge(expr1->falseList(), expr2->falseList());
    }
    else if(op == OR)
    {
        // BasicBlock *trueBB = new BasicBlock(func);  // if the result of lhs is true, jump to the trueBB.
        // expr1->genCode();
        // backPatch(expr1->trueList(), trueBB);
        // builder->setInsertBB(trueBB);               // set the insert point to the trueBB so that intructions generated by expr2 will be inserted into it.
        // expr2->genCode();
        // true_list = expr2->trueList();
        // false_list = merge(expr1->falseList(), expr2->falseList());
    }
    else if(op >= LESS && op <= GREAT)
    {
        // Todo
    }
    else if(op >= ADD && op <= MOD)
    {
        expr1->genCode();
        expr2->genCode();
        Operand *src1 = expr1->getOperand();
        Operand *src2 = expr2->getOperand();
        int opcode;
        switch (op)
        {
        case ADD:
            opcode = BinaryInstruction::ADD;
            break;
        case SUB:
            opcode = BinaryInstruction::SUB;
            break;
        case MUL:
            opcode = BinaryInstruction::MUL;
            break;
        case DIV:
            opcode = BinaryInstruction::DIV;
            break;
        case MOD:
            opcode = BinaryInstruction::MOD;
            break;
        }
        new BinaryInstruction(opcode, dst, src1, src2, bb);
    }
}

void Constant::genCode()
{
    // we don't need to generate code.
}

void Id::genCode()
{
    if(getType()->isConst()){
        return;
    }
    BasicBlock *bb = builder->getInsertBB();
    Operand *addr = dynamic_cast<IdentifierSymbolEntry*>(symbolEntry)->getAddr();
    dst = new Operand(new TemporarySymbolEntry(dst->getType(), SymbolTable::getLabel()));
    new LoadInstruction(dst, addr, bb);
}

void IfStmt::genCode()
{
    Function *func;
    BasicBlock *then_bb, *end_bb;

    func = builder->getInsertBB()->getParent();
    then_bb = new BasicBlock(func);
    end_bb = new BasicBlock(func);

    cond->genCode();
    backPatch(cond->trueList(), then_bb);
    backPatch(cond->falseList(), end_bb);

    builder->setInsertBB(then_bb);
    thenStmt->genCode();
    then_bb = builder->getInsertBB();
    new UncondBrInstruction(end_bb, then_bb);

    builder->setInsertBB(end_bb);
}

void IfElseStmt::genCode()
{
    // Todo
}

void CompoundStmt::genCode()
{
    stmt->genCode();
}

void SeqNode::genCode()
{
    for(auto stmt : stmtList){
        stmt->genCode();
    }
}

void DeclStmt::genCode()
{
    for(auto stmt : defList){
        stmt->genCode();
    }
}

void ReturnStmt::genCode()
{
    BasicBlock *bb = builder->getInsertBB();
    retValue->genCode();
    new RetInstruction(retValue->getOperand(), bb);
}

void AssignStmt::genCode()
{
    BasicBlock *bb = builder->getInsertBB();
    expr->genCode();
    Operand *addr = dynamic_cast<IdentifierSymbolEntry*>(lval->getSymPtr())->getAddr();
    Operand *src = expr->getOperand();
    /***
     * We haven't implemented array yet, the lval can only be ID. So we just store the result of the `expr` to the addr of the id.
     * If you want to implement array, you have to caculate the address first and then store the result into it.
     */
    new StoreInstruction(addr, src, bb);
}

void WhileStmt::genCode()
{
    // Todo
}

void FuncDefParamsNode::genCode()
{
    // Todo
}

void ContinueStmt::genCode()
{
    // Todo
}

void BreakStmt::genCode()
{
    // Todo
}

void InitValNode::genCode()
{
    // Todo
}

void DefNode::genCode()
{
    Operand *addr;
    IdentifierSymbolEntry *se = dynamic_cast<IdentifierSymbolEntry *>(id->getSymPtr());
    if(se->isGlobal())
    {
        SymbolEntry *addr_se;
        addr_se = new IdentifierSymbolEntry(*se);
        addr_se->setType(new PointerType(se->getType()));
        addr = new Operand(addr_se);
        se->setAddr(addr);
    }
    else if(se->isLocal())
    {
        Function *func = builder->getInsertBB()->getParent();
        BasicBlock *entry = func->getEntry();
        Instruction *alloca;
        SymbolEntry *addr_se;
        Type *type;
        type = new PointerType(se->getType());
        addr_se = new TemporarySymbolEntry(type, SymbolTable::getLabel());
        addr = new Operand(addr_se);
        alloca = new AllocaInstruction(addr, se);                   // allocate space for local id in function stack.
        entry->insertFront(alloca);                                 // allocate instructions should be inserted into the begin of the entry block.
        se->setAddr(addr);                                          // set the addr operand in symbol entry so that we can use it in subsequent code generation.
    }
    //add array instructions here
    if(initVal!=nullptr){
        BasicBlock *bb = builder->getInsertBB();
        initVal->genCode();
        Operand *src = dynamic_cast<ExprNode *>(initVal)->getOperand();
    /***
     * We haven't implemented array yet, the lval can only be ID. So we just store the result of the `expr` to the addr of the id.
     * If you want to implement array, you have to caculate the address first and then store the result into it.
     */
    new StoreInstruction(addr, src, bb);
    }
}

void FuncCallParamsNode::genCode()
{
    // Todo
}

void FuncCallNode::genCode()
{
    // Todo
}

void ExprStmtNode::genCode()
{
    // Todo
}

void EmptyStmt::genCode()
{
    // Todo
}

void OneOpExpr::genCode()
{
    BasicBlock *bb = builder->getInsertBB();
    Function *func = bb->getParent();
    if (op == SUB)
    {
        expr->genCode();
        Operand *src1 = new Operand(new ConstantSymbolEntry(TypeSystem::constIntType, 0));
        Operand *src2 = expr->getOperand();
        int opcode = BinaryInstruction::SUB;
        new BinaryInstruction(opcode, dst, src1, src2, bb);
    }
    else if(op == NOT)
    {
        // BasicBlock *trueBB = new BasicBlock(func);  // if the result of lhs is true, jump to the trueBB.
        // expr1->genCode();
        // backPatch(expr1->trueList(), trueBB);
        // builder->setInsertBB(trueBB);               // set the insert point to the trueBB so that intructions generated by expr2 will be inserted into it.
        // expr2->genCode();
        // true_list = expr2->trueList();
        // false_list = merge(expr1->falseList(), expr2->falseList());
    }
}

void Ast::typeCheck()
{
    if(root != nullptr)
        root->typeCheck(nullptr);
}

/**
 * 主要工作是检查函数是否有返回值以及返回值类型是否匹配
 */
void FunctionDef::typeCheck(Node** parentToChild)
{
    // 获取函数的返回值类型
    returnType = ((FunctionType*)se->getType())->getRetType();
    // 判断函数是否返回
    funcReturned = false;
    stmt->typeCheck(nullptr);
    // 非void类型的函数需要有返回值
    if(!funcReturned && !returnType->isVoid()){
        fprintf(stderr, "expected a %s type to return, but no returned value found\n", returnType->toStr().c_str());
        exit(EXIT_FAILURE);
    }
    returnType = nullptr;
}

/**
 * 二元表达式类型检查工作主要为
 * 对两个孩子运算数类型的检查，并根据类型对父节点的类型进行调整
 */
void BinaryExpr::typeCheck(Node** parentToChild)
{
    expr1->typeCheck((Node**)&(this->expr1));
    expr2->typeCheck((Node**)&(this->expr2));
    //检查是否void函数返回值参与运算
    Type* realTypeLeft = expr1->getType()->isFunc() ? 
        ((FunctionType*)expr1->getType())->getRetType() : 
        expr1->getType();
    if(!realTypeLeft->calculatable()){
        fprintf(stderr, "type %s is not calculatable!\n", expr1->getType()->toStr().c_str());
        exit(EXIT_FAILURE);
    }
    Type* realTypeRight = expr2->getType()->isFunc() ? 
        ((FunctionType*)expr2->getType())->getRetType() : 
        expr2->getType();
    if(!realTypeRight->calculatable()){
        fprintf(stderr, "type %s is not calculatable!\n", expr2->getType()->toStr().c_str());
        exit(EXIT_FAILURE);
    }
    // 在语法解析阶段就对父节点和孩子节点的类型进行了相应的转换设置
    // 在类型检查阶段就没有必要再对这部分进行检查了
    // 可以对mod取模运算检查一下是否有浮点参与
    if(op == MOD) {
        if(!(realTypeLeft->isAnyInt() && realTypeRight->isAnyInt())) {
            fprintf(stderr, "mod is not supported with float or bool operands!\n");
            exit(EXIT_FAILURE);
        }
    }
    // 推断父节点类型
    // bool型一律按float处理
    // TODO：增加bool类型处理?
    // if(realTypeLeft->isBool() && realTypeRight->isBool()){
    //     //别忘了两边一边是bool一边是int/float的情况
    // }
    // if(realTypeLeft->isAnyInt() && realTypeRight->isAnyInt()) {
    //     this->setType(TypeSystem::intType);
    // }
    // else{
    //     if(op==MOD){//浮点值参与取模运算
    //         fprintf(stderr, "mod is not supported with float or bool operands!\n");
    //         exit(EXIT_FAILURE);
    //     }
    //     this->setType(TypeSystem::floatType);
    // }
    // 如果父节点不需要这个值，直接返回
    if(parentToChild==nullptr){
        return;
    }
    //左右子树均为常数，计算常量值，替换节点
    if(realTypeLeft->isConst() && realTypeRight->isConst()){
        SymbolEntry *se;
        if(this->getType()->isInt()){
            int val = 0;
            int leftValue = expr1->getSymPtr()->isConstant() ? 
                ((ConstantSymbolEntry*)(expr1->getSymPtr()))->getValue() : //字面值常量
                ((IdentifierSymbolEntry*)(expr1->getSymPtr()))->value;  //符号常量
            int rightValue = expr2->getSymPtr()->isConstant() ? 
                ((ConstantSymbolEntry*)(expr2->getSymPtr()))->getValue() : 
                ((IdentifierSymbolEntry*)(expr2->getSymPtr()))->value;
            switch (op) 
            {
            case ADD:
                val = leftValue + rightValue;
            break;
            case SUB:
                val = leftValue - rightValue;
            break;
            case MUL:
                val = leftValue * rightValue;
            break;
            case DIV:
                val = leftValue / rightValue;
            break;
            case MOD:
                val = leftValue % rightValue;
            break;
            //现行文法不会出现以下可能，因为bool会被当做float处理
            // case AND:
            //     val = leftValue && rightValue;
            // break;
            // case OR:
            //     val = leftValue || rightValue;
            // break;
            case LESS:
                val = leftValue < rightValue;
            break;
            case LESSEQ:
                val = leftValue <= rightValue;
            break;
            case GREAT:
                val = leftValue > rightValue;
            break;
            case GREATEQ:
                val = leftValue >= rightValue;
            break;
            case EQ:
                val = leftValue == rightValue;
            break;
            case NEQ:
                val = leftValue != rightValue;
            break;
            }
            se = new ConstantSymbolEntry(TypeSystem::constIntType, val);
        }
        else{//float or bool
            float val = 0;
            float leftValue = expr1->getSymPtr()->isConstant() ? 
                ((ConstantSymbolEntry*)(expr1->getSymPtr()))->getValue() : 
                ((IdentifierSymbolEntry*)(expr1->getSymPtr()))->value;
            float rightValue = expr2->getSymPtr()->isConstant() ? 
                ((ConstantSymbolEntry*)(expr2->getSymPtr()))->getValue() : 
                ((IdentifierSymbolEntry*)(expr2->getSymPtr()))->value;
            switch (op) 
            {
            case ADD:
                val = leftValue + rightValue;
            break;
            case SUB:
                val = leftValue - rightValue;
            break;
            case MUL:
                val = leftValue * rightValue;
            break;
            case DIV:
                val = leftValue / rightValue;
            break;
            case MOD:
                fprintf(stderr, "mod is not supported with float or bool operands!");
                exit(EXIT_FAILURE);
            break;
            case LESS:
                val = leftValue < rightValue;
            break;
            case LESSEQ:
                val = leftValue <= rightValue;
            break;
            case GREAT:
                val = leftValue > rightValue;
            break;
            case GREATEQ:
                val = leftValue >= rightValue;
            break;
            case EQ:
                val = leftValue == rightValue;
            break;
            case NEQ:
                val = leftValue != rightValue;
            break;
            }
            se = new ConstantSymbolEntry(TypeSystem::constFloatType, val);
        }
        Constant* newNode = new Constant(se);
        *parentToChild = newNode;
        //delete this;
    }
}

void Constant::typeCheck(Node** parentToChild){}

void Id::typeCheck(Node** parentToChild)
{
    // 如果是一个普通变量就什么也不做
    // 如果是数组 要看看维度信息有没有初始化
    // 由于在语法解析阶段已经判断了标识符先定义再使用
    // 所以如果维度信息还未初始化则说明当前是数组定义阶段
    if(isArray() && indices!=nullptr){
        indices->typeCheck(nullptr);
        // 检查indices下的exprList(私有域)中的每个exprNode的类型，若不为自然数则报错
        if(((IdentifierSymbolEntry*)getSymPtr())->arrayDimension.empty()){
            indices->initDimInSymTable((IdentifierSymbolEntry*)getSymPtr());
        }
        // 读取常量数组 这个不打算做了
        else if(getType()->isConst()){
            //TODO: 将常量数组+全常量下标的数组元素访问替换为字面值常量节点Constant
            //STEP：1.遍历indices下的exprList(私有域)，查看是否有非常量节点。若有，直接返回
            //STEP: 2.若全部为常量下标，替换
        }
    }
}

void IfStmt::typeCheck(Node** parentToChild)
{
    cond->typeCheck((Node**)&(this->cond));
    thenStmt->typeCheck((Node**)&(this->thenStmt));
}

void IfElseStmt::typeCheck(Node** parentToChild)
{
    cond->typeCheck((Node**)&(this->cond));
    thenStmt->typeCheck((Node**)&(this->thenStmt));
    elseStmt->typeCheck((Node**)&(this->elseStmt));
}

void CompoundStmt::typeCheck(Node** parentToChild)
{
    if(stmt!=nullptr){
        stmt->typeCheck(nullptr);
    }
}

void SeqNode::typeCheck(Node** parentToChild)
{
    for(int i = 0;i<(int)stmtList.size();++i){
        stmtList[i]->typeCheck((Node**)&(stmtList[i]));
    }
}

void DeclStmt::typeCheck(Node** parentToChild)
{
    for(int i = 0;i<(int)defList.size();++i){
        defList[i]->typeCheck(nullptr);
    }
}

void ReturnStmt::typeCheck(Node** parentToChild)
{
    //fprintf(stderr, "%s %s\n", returnType->toStr().c_str(), retValue->getType()->toStr().c_str());
    if(returnType == nullptr){//not in a fuction
        fprintf(stderr, "return statement outside functions\n");
        exit(EXIT_FAILURE);
    }
    else if(returnType->isVoid() && retValue!=nullptr){//returned a value in void()
        fprintf(stderr, "value returned in a void() function\n");
        exit(EXIT_FAILURE);
    }
    else if(!returnType->isVoid() && retValue==nullptr){//expected returned value, but returned nothing
        fprintf(stderr, "expected a %s type to return, but returned nothing\n", returnType->toStr().c_str());
        exit(EXIT_FAILURE);
    }
    if(!returnType->isVoid()){
        retValue->typeCheck((Node**)&(retValue));
    }
    funcReturned = true;
}

void AssignStmt::typeCheck(Node** parentToChild)
{
    lval->typeCheck(nullptr);
    expr->typeCheck((Node**)&(this->expr));
    if(lval->getType()->isConst()) {
        fprintf(stderr, "Unable to assign value to const variable %s\n", lval->getSymPtr()->toStr().c_str());
        exit(EXIT_FAILURE);
    }
    if(expr->getType()->isFunc() && ((FunctionType*)(expr->getType()))->getRetType()->isVoid()){//返回值为void的函数做运算数
        fprintf(stderr, "expected a return value, but functionType %s returns nothing\n", expr->getType()->toStr().c_str());
        exit(EXIT_FAILURE);
    }
}

void FuncDefParamsNode::typeCheck(Node** parentToChild){}

void ContinueStmt::typeCheck(Node** parentToChild)
{
    if(!inIteration){
        fprintf(stderr, "continue statement outside iterations\n");
        exit(EXIT_FAILURE);
    }
}

void BreakStmt::typeCheck(Node** parentToChild)
{
    if(!inIteration){
        fprintf(stderr, "break statement outside iterations\n");
        exit(EXIT_FAILURE);
    }
}

void WhileStmt::typeCheck(Node** parentToChild)
{
    cond->typeCheck((Node**)&(this->cond));
    inIteration = true;
    bodyStmt->typeCheck((Node**)&(this->bodyStmt));
    inIteration = false;
}

void InitValNode::typeCheck(Node** parentToChild)
{
    
}

void DefNode::typeCheck(Node** parentToChild)
{
    id->typeCheck(nullptr);
    // 不赋初值，直接返回
    if(initVal==nullptr){
        return;
    }
    initVal->typeCheck((Node**)&(initVal));

    if(!id->getType()->isArray()){//不是数组时，右边可能出现函数：int a = f();
        if(((ExprNode*)initVal)->getType()->isFunc() && 
            (!((FunctionType*)(((ExprNode*)initVal)->getType()))->getRetType()->calculatable())){//右边是个为返回值空的函数
            fprintf(stderr, "expected a return value, but functionType %s return nothing\n", ((ExprNode*)initVal)->getType()->toStr().c_str());
            exit(EXIT_FAILURE);
        }
    }
    if(id->getType()->isConst()){
        // 判断是否用变量给常量赋值
        if(!isArray) {
            if(!((ExprNode*)initVal)->getType()->isConst()) {
                fprintf(stderr, "attempt to initialize variable value to const\n");
                exit(EXIT_FAILURE);
            }
        }
        else{
            // if(!(InitValNode*)initVal)->isConst()) {
            //     fprintf(stderr, "attempt to initialize variable value to const\n");
            //     exit(EXIT_FAILURE);
            // }
        }
        // 接下来就是常量计算的工作了
        // 数组初始化值 暂时不打算做了
        if(id->getType()->isArray()){
            //TODO: initialize elements in symbol table
        }
        // 常量初始化值
        else{
            IdentifierSymbolEntry* se = (IdentifierSymbolEntry*)id->getSymPtr();
            se->value = ((ConstantSymbolEntry*)((ExprNode*)initVal)->getSymPtr())->getValue();
        }   
    }
}

void FuncCallParamsNode::typeCheck(Node** parentToChild)
{
    // 对每一个孩子节点进行常量计算
    for(ExprNode* param : paramsList) {
        param->typeCheck((Node**)&param);
    }
}

void FuncCallNode::typeCheck(Node** parentToChild)
{
    // 先对FuncCallParamsNode进行类型检查，主要是完成常量计算
    this->params->typeCheck(nullptr);
    // 然后进行类型匹配
    std::vector<Type*> funcParamsType = (dynamic_cast<FunctionType*>(this->funcId->getSymPtr()->getType()))->getParamsType();
    std::vector<ExprNode*> funcCallParams = this->params->getParamsList();
    // 如果数量不一致直接报错
    if(funcCallParams.size() != funcParamsType.size()) {
        fprintf(stderr, "function %s call params number is not consistent\n",this->funcId->getSymPtr()->toStr().c_str());
        exit(EXIT_FAILURE);
    }
    // 依次匹配类型
    for(int i = 0; i < funcParamsType.size(); i++){
        Type* needType = funcParamsType[i];
        Type* giveType = funcCallParams[i]->getSymPtr()->getType();
        // 暂时不考虑类型转化的问题 所有的类型转化均到IR生成再做
        // 除了void类型都可以进行转化
        if(!needType->calculatable() && giveType->calculatable()
         ||needType->calculatable() && !giveType->calculatable()){
            fprintf(stderr, "function %s call params type is not consistent\n",this->funcId->getSymPtr()->toStr().c_str());
            exit(EXIT_FAILURE);
        }
        // 检查数组是否匹配
        if(!needType->isArray() && giveType->isArray()
         ||needType->isArray() && !giveType->isArray()){
            fprintf(stderr, "function %s call params type is not consistent\n",this->funcId->getSymPtr()->toStr().c_str());
            exit(EXIT_FAILURE);
        }
        //TODO: 检查数组维度是否匹配
        if(needType->isArray() && giveType->isArray()){

        }
    }
}

void ExprStmtNode::typeCheck(Node** parentToChild)
{
    for(int i = 0;i<(int)exprList.size();++i){
        exprList[i]->typeCheck((Node**)&(exprList[i]));
    }
}

void EmptyStmt::typeCheck(Node** parentToChild){}

void OneOpExpr::typeCheck(Node** parentToChild)
{
    expr->typeCheck((Node**)&(this->expr));
    //检查是否void函数返回值参与运算
    Type* realType = expr->getType()->isFunc() ? 
        ((FunctionType*)expr->getType())->getRetType() : 
        expr->getType();
    if(!realType->calculatable()){
        fprintf(stderr, "type %s is not calculatable!\n", expr->getType()->toStr().c_str());
        exit(EXIT_FAILURE);
    }
    //推断父节点类型
    //bool型一律按float处理
    if(realType->isAnyInt()) {
        this->setType(TypeSystem::intType);
    }
    else{
        this->setType(TypeSystem::floatType);
    }
    //如果父节点不需要这个值，直接返回
    if(parentToChild==nullptr){
        return;
    }
    //孩子节点为常数，计算常量值，替换节点
    if(realType->isConst()){
        SymbolEntry *se;
        double val = 0;
        int initValue = expr->getSymPtr()->isConstant() ? 
            ((ConstantSymbolEntry*)(expr->getSymPtr()))->getValue() : 
            ((IdentifierSymbolEntry*)(expr->getSymPtr()))->value;
        switch (op) 
        {
        case SUB:
            val = -initValue;
        break;
        case NOT:
            val = !initValue;
        break;
        }
        if(this->getType()->isInt()){
            se = new ConstantSymbolEntry(TypeSystem::constIntType, val);
        }
        else{//float or bool
            se = new ConstantSymbolEntry(TypeSystem::constFloatType, val);
        }
        Constant* newNode = new Constant(se);
        *parentToChild = newNode;
        //delete this;
    }
}

Type* ExprNode::getType()
{
    return symbolEntry->getType();
}

void ExprNode::setType(Type* type)
{
    symbolEntry->setType(type);
}

void BinaryExpr::output(int level)
{
    std::string op_str;
    switch(op)
    {
        case ADD:
            op_str = "add";
            break;
        case SUB:
            op_str = "sub";
            break;
        case MUL:
            op_str = "mul";
            break;
        case DIV:
            op_str = "div";
            break;
        case MOD:
            op_str = "mod";
            break;
        case AND:
            op_str = "and";
            break;
        case OR:
            op_str = "or";
            break;
        case LESS:
            op_str = "less";
            break;
        case LESSEQ:
            op_str = "lesseq";
            break;
        case GREAT:
            op_str = "great";
            break;
        case GREATEQ:
            op_str = "greateq";
            break;
        case EQ:
            op_str = "eq";
            break;
        case NEQ:
            op_str = "neq";
            break;
    }
    fprintf(yyout, "%*cBinaryExpr\top: %s\ttype: %s\n", level, ' ', op_str.c_str(), symbolEntry->getType()->toStr().c_str());
    expr1->output(level + 4);
    expr2->output(level + 4);
}

void OneOpExpr::output(int level) {
    std::string op_str;
    switch (op) {
        case NOT:
            op_str = "not";
            break;
        case SUB:
            op_str = "minus";
            break;
    }
    fprintf(yyout, "%*cOneOpExpr\top: %s\ttype: %s\n", level, ' ', op_str.c_str(), symbolEntry->getType()->toStr().c_str());
    expr->output(level + 4);
}

void Constant::output(int level)
{
    std::string type, value;
    type = symbolEntry->getType()->toStr();
    value = symbolEntry->toStr();
    fprintf(yyout, "%*cIntegerLiteral\tvalue: %s\ttype: %s\n", level, ' ',
            value.c_str(), type.c_str());
}

bool Id::isArray()
{
    return getType()->isArray();
}

void Id::output(int level)
{
    std::string name, type;
    int scope;
    name = symbolEntry->toStr();
    type = symbolEntry->getType()->toStr();
    scope = dynamic_cast<IdentifierSymbolEntry*>(symbolEntry)->getScope();
    fprintf(yyout, "%*cId\tname: %s\tscope: %d\ttype: %s\n", level, ' ',
            name.c_str(), scope, type.c_str());
    if(isArray() && indices!=nullptr){
        fprintf(yyout, "%*cArrayIndices\n", level+4, ' ');
        indices->output(level+8);
    }
}

void EmptyStmt::output(int level)
{
    fprintf(yyout, "%*cEmptyStmt\n", level, ' ');
}

void ExprStmtNode::addNext(ExprNode* next)
{
    exprList.push_back(next);
}

void ExprStmtNode::output(int level)
{
    fprintf(yyout, "%*cExprStmtNode\n", level, ' ');
    for(auto expr : exprList)
    {
        expr->output(level+4);
    }
}

void ExprStmtNode::initDimInSymTable(IdentifierSymbolEntry* se)
{
    for(auto expr :exprList){
        // 既不是字面值常量，也不是常量表达式
        if(!(expr->getSymPtr()->isConstant() || expr->getType()->isConst())){
            fprintf(stderr, "array dimensions must be constant! %d %d\n", expr->getSymPtr()->isConstant(), expr->getType()->isConst());
            fprintf(stderr, "%d %d\n", (int)((ConstantSymbolEntry*)(expr->getSymPtr()))->getValue(), (int)((IdentifierSymbolEntry*)(expr->getSymPtr()))->value);
            exit(EXIT_FAILURE);
        }
        // 字面值常量，值存在ConstantSymbolEntry中
        if(expr->getSymPtr()->isConstant()){
            se->arrayDimension.push_back((int)((ConstantSymbolEntry*)(expr->getSymPtr()))->getValue());
        }
        // 常量表达式，值存在IdentifierSymbolEntry中
        else if(expr->getType()->isConst()){
            se->arrayDimension.push_back((int)((IdentifierSymbolEntry*)(expr->getSymPtr()))->value);
        }
    }
}

void FuncCallNode::output(int level)
{
    std::string name, type;
    int scope;
    SymbolEntry* funcEntry = funcId->getSymbolEntry();
    name = funcEntry->toStr();
    type = funcEntry->getType()->toStr();
    scope = dynamic_cast<IdentifierSymbolEntry*>(funcEntry)->getScope();
    fprintf(yyout, "%*cFuncCallNode\tfuncName: %s\t funcType: %s\tscope: %d\n", 
            level, ' ', name.c_str(), type.c_str(), scope);
    if(params!=nullptr){
        params->output(level+4);
    }
    else{
        fprintf(yyout, "%*cFuncCallParamsNode NULL\n", level+4, ' ');
    }
}

void FuncCallParamsNode::addNext(ExprNode* next)
{
    paramsList.push_back(next);
}

void FuncCallParamsNode::output(int level)
{
    fprintf(yyout, "%*cFuncCallParamsNode\n", level, ' ');
    for(auto param : paramsList){
        param->output(level+4);
    }
}

void CompoundStmt::output(int level)
{
    fprintf(yyout, "%*cCompoundStmt\n", level, ' ');
    if(stmt == nullptr){
        fprintf(yyout, "%*cNull Stmt\n", level+4, ' ');
    }
    else{
        stmt->output(level + 4);
    }
}

void SeqNode::addNext(StmtNode* next)
{
    stmtList.push_back(next);
}

void SeqNode::output(int level)
{
    fprintf(yyout, "%*cSequence\n", level, ' ');
    for(auto stmt : stmtList)
    {
        stmt->output(level + 4);
    }
}

void DeclStmt::addNext(DefNode* next)
{
    defList.push_back(next);
}

void DeclStmt::output(int level)
{
    fprintf(yyout, "%*cDeclStmt\n", level, ' ');
    for(auto def : defList){
        def->output(level+4);
    }
}

void DefNode::output(int level)
{
    std::string constStr = isConst ? "true" : "false";
    std::string arrayStr = isArray ? "true" : "false";
    fprintf(yyout, "%*cDefNode\tisConst:%s\tisArray:%s\n", level, ' ', constStr.c_str(), arrayStr.c_str());
    id->output(level+4);
    if(initVal == nullptr){
        fprintf(yyout, "%*cnull\n", level+4, ' ');
    }
    else{
        initVal->output(level+4);
    }
}

void InitValNode::addNext(InitValNode* next)
{
    innerList.push_back(next);
}

void InitValNode::output(int level)
{
    std::string constStr = isConst ? "true" : "false";
    fprintf(yyout, "%*cInitValNode\tisConst:%s\n", level, ' ', constStr.c_str());
    for(auto child : innerList)
    {
        child->output(level+4);
    }
    if(leafNode!=nullptr){
        leafNode->output(level+4);
    }
}

void InitValNode::setLeafNode(ExprNode* leaf)
{
    leafNode = leaf;
}

bool InitValNode::isLeaf()
{
    return innerList.empty();
}

void IfStmt::output(int level)
{
    fprintf(yyout, "%*cIfStmt\n", level, ' ');
    cond->output(level + 4);
    thenStmt->output(level + 4);
}

void IfElseStmt::output(int level)
{
    fprintf(yyout, "%*cIfElseStmt\n", level, ' ');
    cond->output(level + 4);
    thenStmt->output(level + 4);
    elseStmt->output(level + 4);
}

void WhileStmt::output(int level)
{
    fprintf(yyout, "%*cWhileStmt\n", level, ' ');
    cond->output(level+4);
    bodyStmt->output(level+4);
}

void BreakStmt::output(int level)
{
    fprintf(yyout, "%*cBreakStmt\n", level, ' ');
}

void ContinueStmt::output(int level)
{
    fprintf(yyout, "%*cContinueStmt\n", level, ' ');
}

void ReturnStmt::output(int level)
{
    fprintf(yyout, "%*cReturnStmt\n", level, ' ');
    if(retValue!=nullptr) retValue->output(level + 4);
}

void AssignStmt::output(int level)
{
    fprintf(yyout, "%*cAssignStmt\n", level, ' ');
    lval->output(level + 4);
    expr->output(level + 4);
}

void FuncDefParamsNode::addNext(Id* next)
{
    paramsList.push_back(next);
}

std::vector<Type*> FuncDefParamsNode::getParamsType()
{
    std::vector<Type*> typeArray;
    for(auto param : paramsList){
        typeArray.push_back(param->getType());
    }
    return typeArray;
}

void FuncDefParamsNode::output(int level)
{
    fprintf(yyout, "%*cFuncDefParamsNode\n", level, ' ');
    for(auto param : paramsList){
        param->output(level+4);
    }
}

void FunctionDef::output(int level)
{
    std::string name, type;
    name = se->toStr();
    type = se->getType()->toStr();
    fprintf(yyout, "%*cFunctionDefine function name: %s, type: %s\n", level, ' ', 
            name.c_str(), type.c_str());
    if(params!=nullptr){
        params->output(level+4);
    }
    else{
        fprintf(yyout, "%*cFuncDefParamsNode NULL\n", level+4, ' ');
    }
    stmt->output(level + 4);
}
